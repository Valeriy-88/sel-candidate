import asyncio
import random
from collections import defaultdict
from datetime import datetime, timedelta

from aiogram import Bot, F, Router, types
from aiogram.filters import BaseFilter
from aiogram.filters.command import Command

from config import ADMIN_ID
from data import array_text, nicknames, quiz_data, save_nicks
from keyboards.inline import (
    build_quiz_keyboard,
    delete_manager,
    next_message,
    start_test,
)

router = Router()
user_states: dict = {}
user_answers: dict = {}
user_scores: dict = {}
user_phase: dict = {}
user_last_action: dict = {}
reminder_tasks: dict = {}
nickname_stats = defaultdict(int)
if not nicknames:
    nicknames: list[str] = [""]
    save_nicks(nicknames)

nickname_queue = nicknames.copy()
random.shuffle(nickname_queue)

bot_instance = None


class IsAdmin(BaseFilter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def __call__(self, message: types.Message) -> bool:
        return message.from_user.id == ADMIN_ID


async def on_startup(bot: Bot) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global bot_instance
    bot_instance = bot
    print("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: %s", bot_instance is not None)


async def on_shutdown() -> None:
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    for task in reminder_tasks.values():
        task.cancel()
    print("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É, –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω—ã")


async def send_reminder(user_id: int) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è

    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    """
    try:
        await asyncio.sleep(600)

        if user_id not in user_phase or user_id not in user_last_action:
            return

        if user_id in user_scores and user_scores[user_id] == len(quiz_data):
            return

        if datetime.now() - user_last_action[user_id] < timedelta(minutes=10):
            return

        try:
            if user_phase[user_id] == "text":
                await bot_instance.send_message(
                    user_id,
                    "‚è∞ –¢—ã –∑–∞–±—ã–ª –ø—Ä–æ –º–µ–Ω—è! "
                    "–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º —á—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤. –ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                )
            elif user_phase[user_id] == "quiz":
                await bot_instance.send_message(
                    user_id,
                    "‚è∞ –¢—ã –∑–∞–±—ã–ª –ø—Ä–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ! "
                    "–î–∞–≤–∞–π –∑–∞–≤–µ—Ä—à–∏–º –µ–≥–æ. –ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                )
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, e)

    except asyncio.CancelledError:
        print("–ó–∞–¥–∞—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        print("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: %s", e)


def update_last_action(user_id: int) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_last_action[user_id] = datetime.now()

    if user_id in reminder_tasks:
        try:
            reminder_tasks[user_id].cancel()
        except:
            pass

    if user_id not in user_scores or user_scores[user_id] < len(quiz_data):
        reminder_tasks[user_id] = asyncio.create_task(send_reminder(user_id))
        print("–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
    """
    user_id: int = message.from_user.id

    if user_id in user_scores and user_scores[user_id] == len(quiz_data):
        await message.answer("–í—ã —É–∂–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!")
        return

    user_states[user_id]: int = -1
    user_scores[user_id]: int = 0
    user_phase[user_id]: str = "text"
    update_last_action(user_id)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ "
        "–æ —Ä–∞–±–æ—Ç–µ –∏ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ.\n–ü–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –±—É–¥–µ—Ç "
        "–Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã —É—Å–≤–æ–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª, "
        "–ø–æ—ç—Ç–æ–º—É –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –≤–æ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è "
        "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–µ—Ö–∞–ª–∏ üöÄ ",
        reply_markup=next_message(),
    )


@router.callback_query(F.data == "next")
async def handle_next_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç
    """
    user_id: int = callback.from_user.id
    update_last_action(user_id)

    try:
        await callback.message.delete()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)

    if user_phase.get(user_id) == "text":
        current_index: int = user_states.get(user_id, -1) + 1
        user_states[user_id]: int = current_index

        if current_index >= len(array_text):
            await callback.message.answer(
                "–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ! –î–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ç–µ—Å—Ç—É. –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç¬ª",
                reply_markup=start_test(),
            )
        else:
            text = array_text[current_index]
            await callback.message.answer(f"{text}", reply_markup=next_message())
    else:
        await callback.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞")


@router.callback_query(F.data == "start_test_user")
async def handle_start_test(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–∑—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    """
    user_id: int = callback.from_user.id
    update_last_action(user_id)

    try:
        await callback.message.delete()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)

    user_phase[user_id]: str = "quiz"
    user_states[user_id]: int = 0
    question = quiz_data[0]["question"]
    await callback.message.answer(f"{question}", reply_markup=build_quiz_keyboard(0))


@router.callback_query(F.data.startswith("answer_"))
async def handle_answer(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    """
    user_id: int = callback.from_user.id
    update_last_action(user_id)

    if user_phase.get(user_id) != "quiz":
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–µ —Ç–µ–∫—Å—Ç—ã")
        return

    parts: list[str] = callback.data.split("_")
    question_index: int = int(parts[1])
    answer_index: int = int(parts[2])

    selected_answer: str = quiz_data[question_index]["options"][answer_index]
    correct_answer: str | list[str] = quiz_data[question_index]["correct"]

    is_correct: bool = selected_answer == correct_answer

    if is_correct:
        user_scores[user_id]: int = user_scores.get(user_id, 0) + 1

    next_question_index: int = question_index + 1
    user_states[user_id]: int = next_question_index

    if next_question_index >= len(quiz_data):
        await show_results(callback)

        if user_id in reminder_tasks:
            reminder_tasks[user_id].cancel()
            del reminder_tasks[user_id]
    else:
        question: str | list[str] = quiz_data[next_question_index]["question"]
        await callback.message.edit_text(
            f"{question}", reply_markup=build_quiz_keyboard(next_question_index)
        )


def get_next_nickname():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º

    Returns:
        str: –°–ª–µ–¥—É—é—â–∏–π –Ω–∏–∫–Ω–µ–π–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    """
    global nickname_queue

    if not nickname_queue:
        min_count: int = min(nickname_stats.values()) if nickname_stats else 0
        candidates: list[str] = [
            nick for nick in nicknames if nickname_stats.get(nick, 0) == min_count
        ]
        if not candidates:
            candidates: list[str] = nicknames.copy()
        nickname_queue = random.sample(candidates, len(candidates))

    next_nick: str = nickname_queue.pop()
    nickname_stats[next_nick]: int = nickname_stats.get(next_nick, 0) + 1

    return next_nick


async def show_results(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
    """
    user_id: int = callback.from_user.id
    total_questions: int = len(quiz_data)
    correct_answers: int = user_scores.get(user_id, 0)

    try:
        selected_nick: str = get_next_nickname()
        success_message: str = (
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç! "
            f"–°–∫–æ—Ä–µ–µ –ø–∏—à–∏—Ç–µ –í–∞—à–µ–º—É –°–ê–ú—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {selected_nick}.\n\n"
            "<b>–ú—ã –∂–¥–µ–º –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n\n"
            "–ú–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –æ–±—É—á–∞—é—â–µ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã –í–∞—Å –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n"
            "<i>–í–∞—Å –ø—Ä–∏–º—É—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫. "
            "–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏. "
            "–í —Å—É–±–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç.</i>"
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∏–∫–Ω–µ–π–º–∞: %s", e)
        success_message: str = (
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç! "
            "–°–∫–æ—Ä–µ–µ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–∞—à–∏–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º "
            "–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ https://t.me/gridnyasha.\n\n"
            "<b>–ú—ã –∂–¥–µ–º –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n"
            "<i>–í–∞—Å –ø—Ä–∏–º—É—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫. "
            "–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏. "
            "–í —Å—É–±–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç.</i>"
        )

    if correct_answers >= total_questions:
        await callback.message.edit_text(success_message)
    else:
        await callback.message.edit_text(
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct_answers} "
            f"–∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart"
                        )
                    ]
                ]
            ),
        )


@router.callback_query(F.data == "restart")
async def handle_restart(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –Ω–∞—á–∞–ª—É –æ–±—É—á–µ–Ω–∏—è
    """
    user_id: int = callback.from_user.id
    user_states[user_id]: int = -1
    user_scores[user_id]: int = 0
    user_phase[user_id]: str = "text"
    update_last_action(user_id)

    try:
        await callback.message.delete()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)

    await callback.message.answer(
        "–ù–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ¬ª —á—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        reply_markup=next_message(),
    )


@router.message(Command("list"), IsAdmin())
async def cmd_list(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    """
    array_nicknames = "\n".join(nicknames)
    await message.answer(
        "–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n%s",
        array_nicknames,
    )


@router.message(Command("add"), IsAdmin())
async def cmd_add(message: types.Message):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    """
    await message.answer(
        "–ù–∞–ø–∏—à–∏ –Ω–∏–∫–Ω–µ–π–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫",
    )
    user_phase[message.from_user.id]: str = "adding_nickname"


@router.message(Command("del"), IsAdmin())
async def cmd_delete(message: types.Message):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    """
    await message.answer(
        "–≤—ã–±–µ—Ä–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞",
        reply_markup=delete_manager(),
    )


@router.callback_query(F.data.startswith("delete_"))
async def handle_delete(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    """
    index: int = int(callback.data.split("_")[1])
    deleted_nick: str = nicknames.pop(index)
    save_nicks(nicknames)

    if deleted_nick in nickname_queue:
        nickname_queue.remove(deleted_nick)
    if deleted_nick in nickname_stats:
        del nickname_stats[deleted_nick]

    await callback.message.edit_text(
        f"–ù–∏–∫–Ω–µ–π–º {deleted_nick} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", reply_markup=None
    )


@router.message(Command("list", "add", "del"))
async def handle_non_admin_commands(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")


@router.message(F.text)
async def add_manager_in_list(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫
    """
    if user_phase.get(message.from_user.id) != "adding_nickname":
        return

    if message.from_user.id != ADMIN_ID:
        return

    new_nick: str = message.text.strip()

    if not new_nick:
        await message.answer("–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    if f"https://t.me/{new_nick}" in nicknames:
        await message.answer("–≠—Ç–æ—Ç –Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!")
        return

    if new_nick.startswith(("http://", "https://", "@")):
        await message.answer("–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–Ω (–±–µ–∑ @ –∏ —Å—Å—ã–ª–æ–∫)")
        return

    full_nick: str = f"https://t.me/{new_nick}"

    nicknames.append(full_nick)
    save_nicks(nicknames)

    for nick in nicknames:
        nickname_stats[nick] = 0

    nickname_queue.clear()

    user_phase[message.from_user.id] = None
    await message.answer("–ù–∏–∫–Ω–µ–π–º %s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", full_nick)
